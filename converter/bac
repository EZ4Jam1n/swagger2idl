// getPrimaryType 返回主类型，优先排除 "null"
func getPrimaryType(types *openapi3.Types) (string, error) {
	if types == nil || len(*types) == 0 {
		return "", fmt.Errorf("schema type is undefined")
	}

	// 优先选择非 "null" 类型
	for _, t := range *types {
		if t != "null" {
			return t, nil
		}
	}

	// 如果全是 null 类型，返回错误
	return "", fmt.Errorf("no valid non-null type found")
}

// convertSimpleTypeToProto 将简单的 OpenAPI 类型转换为 Protobuf 类型
func convertSimpleTypeToProto(openapiType string) string {
	switch openapiType {
	case "string":
		return "string"
	case "integer":
		return "int32" // 根据实际需求，可以使用 int32 或 int64
	case "boolean":
		return "bool"
	default:
		return "string" // 默认处理为字符串
	}
}


// getFirstType 获取 Types 中的第一个有效类型
func getFirstType(types *openapi3.Types) string {
	if types != nil && len(*types) > 0 {
		return (*types)[0]
	}
	return ""
}

//// ConvertSchemaToProtoMessage1 将 OpenAPI schema 转换为 Protobuf 消息
//func (c *ProtoConverter) ConvertSchemaToProtoMessage1(schema *openapi3.Schema, name string) (*protobuf.ProtoMessage, error) {
//	protoMsg := &protobuf.ProtoMessage{Name: name}
//
//	if schema.Type != nil {
//		if schema.Type.Includes("object") {
//			// 遍历对象的属性，将每个属性转换为 Protobuf 字段
//			for propName, propSchema := range schema.Properties {
//				if propSchema.Ref != "" {
//					propName = extractMessageNameFromRef(propSchema.Ref)
//				}
//
//				// 处理数组类型
//				if propSchema.Value.Type != nil && propSchema.Value.Type.Includes("array") {
//					itemType, err := c.convertSchemaToProtoType(propSchema.Value.Items.Value)
//					if err != nil {
//						return nil, err
//					}
//
//					// 如果 items 是对象，生成 repeated message
//					field := &protobuf.ProtoField{Name: propName, Type: itemType}
//					protoMsg.Fields = append(protoMsg.Fields, field)
//				} else {
//					// 处理其他类型
//					field, err := c.convertSchemaToProtoField(propName, propSchema.Value)
//					if err != nil {
//						return nil, err
//					}
//					protoMsg.Fields = append(protoMsg.Fields, field)
//				}
//			}
//
//			// 处理 additionalProperties（如果定义了）
//			if schema.AdditionalProperties.Schema != nil {
//				nestedField, err := c.handleNestedAdditionalProperties(schema, name+"Nested")
//				if err != nil {
//					return nil, err
//				}
//				protoMsg.Fields = append(protoMsg.Fields, nestedField)
//			}
//		} else if schema.Type.Includes("array") {
//			// 处理顶层数组类型
//			if schema.Items.Ref != "" {
//				itemType := extractMessageNameFromRef(schema.Items.Ref)
//				field := &protobuf.ProtoField{Name: name, Type: "repeated " + itemType}
//				protoMsg.Fields = append(protoMsg.Fields, field)
//			} else if schema.Items.Value != nil {
//				itemType, err := c.convertSchemaToProtoType(schema.Items.Value)
//				if err != nil {
//					return nil, err
//				}
//				field := &protobuf.ProtoField{Name: name, Type: "repeated " + itemType}
//				protoMsg.Fields = append(protoMsg.Fields, field)
//			}
//		} else {
//
//			field, _ := c.convertSchemaToProtoField(name, schema)
//			protoMsg.Fields = append(protoMsg.Fields, field)
//		}
//	}
//
//	if c.converterOption.openapiOption {
//		optionStr := structToProtobuf(schema, "  ")
//
//		// 添加 openapi.schema 注解
//		schemaOption := &protobuf.Option{
//			Name:  "openapi.schema",
//			Value: optionStr,
//		}
//		protoMsg.Options = append(protoMsg.Options, schemaOption)
//	}
//
//	return protoMsg, nil
//}
//
//// convertSchemaToProtoField 根据 OpenAPI schema 生成 Protobuf 字段，递归处理嵌套类型
//func (c *ProtoConverter) convertSchemaToProtoField(fieldName string, schema *openapi3.Schema) (*protobuf.ProtoField, error) {
//	var protoType string
//
//	// 检查 schema 是否有组合类型定义 (oneOf, anyOf, allOf)
//	if len(schema.OneOf) > 0 {
//		return c.handleOneOf(fieldName, schema.OneOf)
//	}
//	if len(schema.AnyOf) > 0 {
//		return c.handleOneOf(fieldName, schema.AnyOf) // 与 oneOf 逻辑相似
//	}
//	if len(schema.AllOf) > 0 {
//		return c.handleAllOf(fieldName, schema.AllOf)
//	}
//
//	// 处理对象类型的 additionalProperties，将其转换为 Protobuf map
//	if schema.Type != nil && schema.Type.Includes("object") {
//		if schema.AdditionalProperties.Schema != nil {
//			// 处理 additionalProperties 为 map 的情况
//			keyType := "string" // Protobuf 的 map 键类型通常是 string
//			valueSchema := schema.AdditionalProperties.Schema.Value
//			valueType, err := c.convertSchemaToProtoType(valueSchema)
//			if err != nil {
//				return nil, err
//			}
//
//			protoType = fmt.Sprintf("map<%s, %s>", keyType, valueType)
//		} else {
//			// 否则处理为嵌套的 message
//			nestedMessage, err := c.convertObjectToProtoMessage(fieldName, schema)
//			if err != nil {
//				return nil, err
//			}
//			return &protobuf.ProtoField{
//				Name: fieldName,
//				Type: nestedMessage.Name,
//			}, nil
//		}
//	} else {
//		// 处理其他基础类型
//		fieldType, err := c.convertSchemaToProtoType(schema)
//		if err != nil {
//			return nil, err
//		}
//		protoType = fieldType
//	}
//
//	field := &protobuf.ProtoField{
//		Name: fieldName,
//		Type: protoType,
//	}
//
//	if c.converterOption.openapiOption {
//		optionStr := structToProtobuf(schema, "    ")
//
//		// 添加 openapi.schema 注解
//		schemaOption := &protobuf.Option{
//			Name:  "openapi.property",
//			Value: optionStr,
//		}
//		field.Options = append(field.Options, schemaOption)
//	}
//	return field, nil
//}
//
//// convertSchemaToProtoType 将 OpenAPI 基本类型转换为 Protobuf 类型
//func (c *ProtoConverter) convertSchemaToProtoType(schema *openapi3.Schema) (string, error) {
//	if len(schema.Type.Slice()) == 0 {
//		return "", fmt.Errorf("schema type is missing")
//	}
//
//	mainType, err := getPrimaryType(schema.Type)
//	if err != nil {
//		return "", err
//	}
//
//	switch mainType {
//	case "string":
//		// 处理 string 的不同 format
//		switch schema.Format {
//		case "date-time":
//			return "string", nil
//		case "byte":
//			return "bytes", nil
//		case "binary":
//			return "bytes", nil
//		case "uuid":
//			return "string", nil
//		default:
//			return "string", nil
//		}
//	case "integer":
//		switch schema.Format {
//		case "int64":
//			return "int64", nil
//		case "int32", "":
//			return "int32", nil
//		default:
//			return "", fmt.Errorf("unsupported integer format: %s", schema.Format)
//		}
//	case "number":
//		switch schema.Format {
//		case "float":
//			return "float", nil
//		case "double":
//			return "double", nil
//		default:
//			return "", fmt.Errorf("unsupported number format: %s", schema.Format)
//		}
//	case "boolean":
//		return "bool", nil
//	case "array":
//		// 处理数组类型
//		if schema.Items.Ref != "" {
//			return "repeated " + extractMessageNameFromRef(schema.Items.Ref), nil
//		}
//		if schema.Items != nil && schema.Items.Value != nil {
//			// 这里处理 items 是 object 的情况，生成 repeated message
//			if schema.Items.Value.Type != nil && schema.Items.Value.Type.Includes("object") {
//				messageName := schema.Items.Value.Title
//				if messageName == "" {
//					messageName = "Item"
//				}
//				message, err := c.convertObjectToProtoMessage(messageName, schema.Items.Value)
//				if err != nil {
//					return "", err
//				}
//				c.addMessageToProto(message)
//				return "repeated " + message.Name, nil
//			}
//
//			// 处理其他类型
//			itemType, err := c.convertSchemaToProtoType(schema.Items.Value)
//			if err != nil {
//				return "", err
//			}
//			return "repeated " + itemType, nil
//		}
//		return "", fmt.Errorf("array type schema must have items defined")
//	case "object":
//		// 处理嵌套对象
//		message, err := c.convertObjectToProtoMessage(schema.Title, schema)
//		if err != nil {
//			return "", err
//		}
//		return message.Name, nil
//	default:
//		return "", fmt.Errorf("unsupported schema type: %s", mainType)
//	}
//}
//
//// convertObjectToProtoMessage 将 OpenAPI object 类型的 schema 转换为 Protobuf 嵌套消息
//func (c *ProtoConverter) convertObjectToProtoMessage(messageName string, schema *openapi3.Schema) (*protobuf.ProtoMessage, error) {
//	// 创建一个新的 Protobuf 消息
//	message := &protobuf.ProtoMessage{Name: messageName}
//
//	// 遍历对象的 properties 并生成 Protobuf 字段
//	for propName, propSchemaRef := range schema.Properties {
//		// 检查是否存在 $ref
//		if propSchemaRef.Ref != "" {
//			// 处理 $ref，提取引用的消息名
//			refMessageName := extractMessageNameFromRef(propSchemaRef.Ref)
//			field := &protobuf.ProtoField{
//				Name: propName,
//				Type: refMessageName, // 引用的 Protobuf 消息类型
//			}
//			message.Fields = append(message.Fields, field)
//		} else if propSchemaRef.Value != nil {
//			// 递归调用 convertSchemaToProtoField 来生成字段
//			field, err := c.convertSchemaToProtoField(propName, propSchemaRef.Value)
//			if err != nil {
//				return nil, err
//			}
//
//			message.Fields = append(message.Fields, field)
//		}
//	}
//
//	// 返回生成的 Protobuf 嵌套消息
//	return message, nil
//}
//
//// handleOneOf 处理 oneOf 或 anyOf 组合类型并生成 Protobuf 的 oneof 字段
//func (c *ProtoConverter) handleOneOf(fieldName string, schemas openapi3.SchemaRefs) (*protobuf.ProtoField, error) {
//	var oneOfFields []*protobuf.ProtoField
//
//	for idx, schemaRef := range schemas {
//		schema := schemaRef.Value
//		if schema == nil {
//			continue
//		}
//
//		// 为每个 oneOf 选项生成一个唯一字段名称
//		fieldNameVariant := fmt.Sprintf("%s_option%d", fieldName, idx+1)
//
//		// 将 schema 转换为 Protobuf 字段
//		field, err := c.convertSchemaToProtoField(fieldNameVariant, schema)
//		if err != nil {
//			return nil, err
//		}
//
//		oneOfFields = append(oneOfFields, field)
//	}
//
//	// 返回一个包含 oneof 字段的 Protobuf 结构
//	return &protobuf.ProtoField{
//		Name:  fieldName,
//		OneOf: oneOfFields,
//	}, nil
//}
//
//// handleAllOf 处理 allOf 组合类型并生成 Protobuf 的嵌套消息
//func (c *ProtoConverter) handleAllOf(fieldName string, schemas openapi3.SchemaRefs) (*protobuf.ProtoField, error) {
//	message := &protobuf.ProtoMessage{Name: fieldName}
//
//	for _, schemaRef := range schemas {
//		schema := schemaRef.Value
//		if schema == nil {
//			continue
//		}
//
//		// 遍历 allOf 中的每个 schema，并将其字段合并到 message 中
//		for propName, propSchemaRef := range schema.Properties {
//			field, err := c.convertSchemaToProtoField(propName, propSchemaRef.Value)
//			if err != nil {
//				return nil, err
//			}
//			message.Fields = append(message.Fields, field)
//		}
//	}
//
//	return &protobuf.ProtoField{
//		Name: message.Name,
//		Type: message.Name, // 引用生成的 message
//	}, nil
//}
//
//// convertComplexSchemaToProtoMessage 处理 OpenAPI 中的 oneOf/anyOf/allOf 类型
//func (c *ProtoConverter) convertComplexSchemaToProtoMessage(fieldName string, schema *openapi3.Schema) (*protobuf.ProtoMessage, error) {
//	message := &protobuf.ProtoMessage{Name: fieldName}
//
//	var complexFields []*protobuf.ProtoField
//	for _, subSchemaRef := range append(schema.OneOf, schema.AnyOf...) {
//		subSchema := subSchemaRef.Value
//		if subSchema != nil {
//			field, err := c.convertSchemaToProtoField(fieldName, subSchema)
//			if err != nil {
//				return nil, err
//			}
//			complexFields = append(complexFields, field)
//		}
//	}
//
//	if len(complexFields) > 0 {
//		for idx, field := range complexFields {
//			field.Name = fmt.Sprintf("%s_option%d", fieldName, idx+1) // 创建唯一字段名
//			message.Fields = append(message.Fields, field)
//		}
//	}
//
//	return message, nil
//}

// 处理嵌套的 Map 类型
//func (c *ProtoConverter) handleNestedAdditionalProperties(schema *openapi3.Schema, defaultName string) (*protobuf.ProtoField, error) {
//	if schema.AdditionalProperties.Schema != nil {
//		keyType := "string" // Map 的键通常是字符串
//		var valueType string
//
//		// 如果 additionalProperties 是 object，递归生成 message
//		if schema.AdditionalProperties.Schema.Value.Type.Includes("object") {
//			// 生成嵌套消息名
//			nestedMessageName := defaultName + "Nested"
//
//			// 递归生成嵌套的 Protobuf 消息
//			nestedMsg, err := c.ConvertSchemaToProtoFieldOrMessage(schema.AdditionalProperties.Schema, nestedMessageName)
//			if err != nil {
//				return &protobuf.ProtoField{}, err
//			}
//			nestedMsgA := nestedMsg.(*protobuf.ProtoMessage)
//			// 将嵌套消息添加到 ProtoFile 中
//			c.addMessageToProto(nestedMsgA)
//
//			// 使用嵌套消息的名称作为 Map 的值类型
//			valueType = nestedMsgA.Name
//		} else {
//			// 处理简单类型
//			valueType = convertSimpleTypeToProto(getFirstType(schema.AdditionalProperties.Schema.Value.Type))
//		}
//
//		// 使用默认名称作为字段名
//		fieldName := schema.Title
//		if fieldName == "" {
//			fieldName = defaultName
//		}
//
//		// 返回 map 类型的字段
//		field := &protobuf.ProtoField{
//			Name: fieldName,
//			Type: fmt.Sprintf("map<%s, %s>", keyType, valueType),
//		}
//		return field, nil
//	}
//	return &protobuf.ProtoField{}, fmt.Errorf("additionalProperties must have a schema")
//}