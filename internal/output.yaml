/pet:
    post:
        description: Add a new pet to the store
        operationId: addPet
        requestBody:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Pet'
                application/x-www-form-urlencoded:
                    schema:
                        $ref: '#/components/schemas/Pet'
                application/xml:
                    schema:
                        $ref: '#/components/schemas/Pet'
            description: Create a new pet in the store
            required: true
        responses:
            "200":
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Pet'
                    application/xml:
                        schema:
                            $ref: '#/components/schemas/Pet'
                description: Successful operation
            "400":
                description: Invalid input
            "422":
                description: Validation exception
        security:
            - petstore_auth:
                - write:pets
                - read:pets
        summary: Add a new pet to the store
        tags:
            - pet
    put:
        description: Update an existing pet by Id
        operationId: updatePet
        requestBody:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Pet'
                application/x-www-form-urlencoded:
                    schema:
                        $ref: '#/components/schemas/Pet'
                application/xml:
                    schema:
                        $ref: '#/components/schemas/Pet'
            description: Update an existent pet in the store
            required: true
        responses:
            "200":
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Pet'
                    application/xml:
                        schema:
                            $ref: '#/components/schemas/Pet'
                description: Successful operation
            "400":
                description: Invalid ID supplied
            "404":
                description: Pet not found
            "422":
                description: Validation exception
        security:
            - petstore_auth:
                - write:pets
                - read:pets
        summary: Update an existing pet
        tags:
            - pet
/pet/{petId}:
    delete:
        description: delete a pet
        operationId: deletePet
        parameters:
            - in: header
              name: api_key
              schema:
                type: string
            - description: Pet id to delete
              in: path
              name: petId
              required: true
              schema:
                format: int64
                type: integer
        responses:
            "400":
                description: Invalid pet value
        security:
            - petstore_auth:
                - write:pets
                - read:pets
        summary: Deletes a pet
        tags:
            - pet
    get:
        description: Returns a single pet
        operationId: getPetById
        parameters:
            - description: ID of pet to return
              in: path
              name: petId
              required: true
              schema:
                format: int64
                type: integer
        responses:
            "200":
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Pet'
                    application/xml:
                        schema:
                            $ref: '#/components/schemas/Pet'
                description: successful operation
            "400":
                description: Invalid ID supplied
            "404":
                description: Pet not found
        security:
            - api_key: []
            - petstore_auth:
                - write:pets
                - read:pets
        summary: Find pet by ID
        tags:
            - pet
    post:
        operationId: updatePetWithForm
        parameters:
            - description: ID of pet that needs to be updated
              in: path
              name: petId
              required: true
              schema:
                format: int64
                type: integer
            - description: Name of pet that needs to be updated
              in: query
              name: name
              schema:
                type: string
            - description: Status of pet that needs to be updated
              in: query
              name: status
              schema:
                type: string
        responses:
            "400":
                description: Invalid input
        security:
            - petstore_auth:
                - write:pets
                - read:pets
        summary: Updates a pet in the store with form data
        tags:
            - pet
/pet/{petId}/uploadImage:
    post:
        operationId: uploadFile
        parameters:
            - description: ID of pet to update
              in: path
              name: petId
              required: true
              schema:
                format: int64
                type: integer
            - description: Additional Metadata
              in: query
              name: additionalMetadata
              schema:
                type: string
        requestBody:
            content:
                application/octet-stream:
                    schema:
                        format: binary
                        type: string
        responses:
            "200":
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ApiResponse'
                description: successful operation
        security:
            - petstore_auth:
                - write:pets
                - read:pets
        summary: uploads an image
        tags:
            - pet
/pet/findByStatus:
    get:
        description: Multiple status values can be provided with comma separated strings
        operationId: findPetsByStatus
        parameters:
            - description: Status values that need to be considered for filter
              explode: true
              in: query
              name: status
              schema:
                default: available
                enum:
                    - available
                    - pending
                    - sold
                type: string
        responses:
            "200":
                content:
                    application/json:
                        schema:
                            items:
                                $ref: '#/components/schemas/Pet'
                            type: array
                    application/xml:
                        schema:
                            items:
                                $ref: '#/components/schemas/Pet'
                            type: array
                description: successful operation
            "400":
                description: Invalid status value
        security:
            - petstore_auth:
                - write:pets
                - read:pets
        summary: Finds Pets by status
        tags:
            - pet
/pet/findByTags:
    get:
        description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
        operationId: findPetsByTags
        parameters:
            - description: Tags to filter by
              explode: true
              in: query
              name: tags
              schema:
                items:
                    type: string
                type: array
        responses:
            "200":
                content:
                    application/json:
                        schema:
                            items:
                                $ref: '#/components/schemas/Pet'
                            type: array
                    application/xml:
                        schema:
                            items:
                                $ref: '#/components/schemas/Pet'
                            type: array
                description: successful operation
            "400":
                description: Invalid tag value
        security:
            - petstore_auth:
                - write:pets
                - read:pets
        summary: Finds Pets by tags
        tags:
            - pet
/store/inventory:
    get:
        description: Returns a map of status codes to quantities
        operationId: getInventory
        responses:
            "200":
                content:
                    application/json:
                        schema:
                            additionalProperties:
                                additionalProperties:
                                    format: int32
                                    type: integer
                                type: object
                            type: object
                description: successful operation
        security:
            - api_key: []
        summary: Returns pet inventories by status
        tags:
            - store
/store/order:
    post:
        description: Place a new order in the store
        operationId: placeOrder
        requestBody:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Order'
                application/x-www-form-urlencoded:
                    schema:
                        $ref: '#/components/schemas/Order'
                application/xml:
                    schema:
                        $ref: '#/components/schemas/Order'
        responses:
            "200":
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Order'
                description: successful operation
            "400":
                description: Invalid input
            "422":
                description: Validation exception
        summary: Place an order for a pet
        tags:
            - store
/store/order/{orderId}:
    delete:
        description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
        operationId: deleteOrder
        parameters:
            - description: ID of the order that needs to be deleted
              in: path
              name: orderId
              required: true
              schema:
                format: int64
                type: integer
        responses:
            "400":
                description: Invalid ID supplied
            "404":
                description: Order not found
        summary: Delete purchase order by ID
        tags:
            - store
    get:
        description: For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
        operationId: getOrderById
        parameters:
            - description: ID of order that needs to be fetched
              in: path
              name: orderId
              required: true
              schema:
                format: int64
                type: integer
        responses:
            "200":
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Order'
                    application/xml:
                        schema:
                            $ref: '#/components/schemas/Order'
                description: successful operation
            "400":
                description: Invalid ID supplied
            "404":
                description: Order not found
        summary: Find purchase order by ID
        tags:
            - store
/user:
    post:
        description: This can only be done by the logged in user.
        operationId: createUser
        requestBody:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/User'
                application/x-www-form-urlencoded:
                    schema:
                        $ref: '#/components/schemas/User'
                application/xml:
                    schema:
                        $ref: '#/components/schemas/User'
            description: Created user object
        responses:
            default:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/User'
                    application/xml:
                        schema:
                            $ref: '#/components/schemas/User'
                description: successful operation
        summary: Create user
        tags:
            - user
/user/{username}:
    delete:
        description: This can only be done by the logged in user.
        operationId: deleteUser
        parameters:
            - description: The name that needs to be deleted
              in: path
              name: username
              required: true
              schema:
                type: string
        responses:
            "400":
                description: Invalid username supplied
            "404":
                description: User not found
        summary: Delete user
        tags:
            - user
    get:
        operationId: getUserByName
        parameters:
            - description: 'The name that needs to be fetched. Use user1 for testing. '
              in: path
              name: username
              required: true
              schema:
                type: string
        responses:
            "200":
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/User'
                    application/xml:
                        schema:
                            $ref: '#/components/schemas/User'
                description: successful operation
            "400":
                description: Invalid username supplied
            "404":
                description: User not found
        summary: Get user by user name
        tags:
            - user
    put:
        description: This can only be done by the logged in user.
        operationId: updateUser
        parameters:
            - description: name that need to be deleted
              in: path
              name: username
              required: true
              schema:
                type: string
        requestBody:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/User'
                application/x-www-form-urlencoded:
                    schema:
                        $ref: '#/components/schemas/User'
                application/xml:
                    schema:
                        $ref: '#/components/schemas/User'
            description: Update an existent user in the store
        responses:
            default:
                description: successful operation
        summary: Update user
        tags:
            - user
/user/createWithList:
    post:
        description: Creates list of users with given input array
        operationId: createUsersWithListInput
        requestBody:
            content:
                application/json:
                    schema:
                        items:
                            $ref: '#/components/schemas/User'
                        type: array
        responses:
            "200":
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/User'
                    application/xml:
                        schema:
                            $ref: '#/components/schemas/User'
                description: Successful operation
            default:
                description: successful operation
        summary: Creates list of users with given input array
        tags:
            - user
/user/login:
    get:
        operationId: loginUser
        parameters:
            - description: The user name for login
              in: query
              name: username
              schema:
                type: string
            - description: The password for login in clear text
              in: query
              name: password
              schema:
                type: string
        responses:
            "200":
                content:
                    application/json:
                        schema:
                            type: string
                    application/xml:
                        schema:
                            type: string
                description: successful operation
                headers:
                    X-Expires-After:
                        description: date in UTC when token expires
                        schema:
                            format: date-time
                            type: string
                    X-Rate-Limit:
                        description: calls per hour allowed by the user
                        schema:
                            format: int32
                            type: integer
            "400":
                description: Invalid username/password supplied
        summary: Logs user into the system
        tags:
            - user
/user/logout:
    get:
        operationId: logoutUser
        responses:
            default:
                description: successful operation
        summary: Logs out current logged in user session
        tags:
            - user
